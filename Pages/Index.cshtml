@page
@model TodoApp.Pages.IndexModel
@{
    ViewData["Title"] = "Todo List";
}

<div class="container">
    <h1 class="display-4 mb-4">Todo List</h1>

    <div class="row">
        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Add New Todo</h5>
                    <form id="addTodoForm">
                        <div class="mb-3">
                            <label for="title" class="form-label">Title</label>
                            <input type="text" class="form-control" id="title" required maxlength="100">
                        </div>
                        <div class="mb-3">
                            <label for="description" class="form-label">Description</label>
                            <textarea class="form-control" id="description" rows="3" maxlength="500"></textarea>
                        </div>
                        <button type="submit" class="btn btn-primary">Add Todo</button>
                    </form>
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <div id="todoList" class="list-group">
                <!-- Todos will be loaded here -->
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <!-- Reference the local SignalR client library (must be before site.js) -->
    <script src="/lib/signalr/dist/browser/signalr.js"></script>
    <script src="/js/site.js"></script>
    <script>
        // Load todos on page load
        document.addEventListener('DOMContentLoaded', loadTodos);

        // Add todo form submission
        document.getElementById('addTodoForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            const title = document.getElementById('title').value;
            const description = document.getElementById('description').value;

            try {
                const response = await fetch('/api/todo', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ title, description })
                });

                if (response.ok) {
                    document.getElementById('title').value = '';
                    document.getElementById('description').value = '';
                    await loadTodos();
                } else {
                    alert('Failed to add todo');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Error adding todo');
            }
        });

        // Load todos from API
        async function loadTodos() {
            try {
                const response = await fetch('/api/todo');
                const todos = await response.json();
                const todoList = document.getElementById('todoList');
                todoList.innerHTML = '';

                todos.forEach(todo => {
                    const item = document.createElement('div');
                    item.className = `list-group-item ${todo.isComplete ? 'list-group-item-success' : ''}`;
                    item.id = `todo-${todo.id}`;
                    const todoJson = JSON.stringify(todo).replace(/"/g, '&quot;');
                    
                    item.innerHTML = `
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <div class="d-flex align-items-center gap-2 mb-2">
                                    <h5 class="mb-0 ${todo.isComplete ? 'text-decoration-line-through text-muted' : ''}">${todo.title}</h5>
                                    <span class="badge ${todo.isComplete ? 'bg-success' : 'bg-warning text-dark'} rounded-pill">
                                        ${todo.isComplete ? 'Completed' : 'Uncompleted'}
                                    </span>
                                </div>
                                <p class="mb-1 ${todo.isComplete ? 'text-decoration-line-through text-muted' : ''}">${todo.description || ''}</p>
                                <small>Created: ${new Date(todo.createdAt).toLocaleString()}</small>
                                ${todo.isComplete && todo.completedAt ? 
                                    `<br><small class="text-success">Completed: ${new Date(todo.completedAt).toLocaleString()}</small>` 
                                    : ''}
                            </div>
                            <div>
                                <button class="btn btn-sm ${todo.isComplete ? 'btn-secondary' : 'btn-success'}"
                                        onclick="toggleTodo(${todoJson}, ${!todo.isComplete})">
                                    ${todo.isComplete ? 'Mark Incomplete' : 'Mark Complete'}
                                </button>
                                <button class="btn btn-sm btn-danger" onclick="deleteTodo(${todo.id})">
                                    Delete
                                </button>
                            </div>
                        </div>
                    `;
                    todoList.appendChild(item);
                });
            } catch (error) {
                console.error('Error:', error);
                alert('Error loading todos');
            }
        }

        // Toggle todo completion status
        async function toggleTodo(todo, newIsComplete) {
            try {
                const currentDate = new Date().toISOString();
                const updatedTodo = {
                    id: todo.id,
                    title: todo.title,
                    description: todo.description,
                    isComplete: newIsComplete,
                    completedAt: newIsComplete ? currentDate : null,
                    createdAt: todo.createdAt
                };

                console.log('Updating todo:', updatedTodo);

                const response = await fetch(`/api/todo/${todo.id}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(updatedTodo)
                });

                if (response.ok) {
                    console.log('Todo updated successfully');
                    await loadTodos();
                } else {
                    const errorText = await response.text();
                    console.error('Update failed:', errorText);
                    alert('Failed to update todo');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Error updating todo');
            }
        }

        // Delete todo
        async function deleteTodo(id) {
            if (!confirm('Are you sure you want to delete this todo?')) {
                return;
            }

            try {
                const response = await fetch(`/api/todo/${id}`, {
                    method: 'DELETE'
                });

                if (response.ok) {
                    await loadTodos();
                } else {
                    alert('Failed to delete todo');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Error deleting todo');
            }
        }
    </script>
} 